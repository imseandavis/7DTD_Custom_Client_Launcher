#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: dd2ea8f4-513a-4ecd-8f67-90223306c70b
# Source File: C:\Users\imsea\OneDrive - Authentic Reveal, LLC\Documents\SAPIEN\PowerShell Studio\Projects\7 Days To die Server Launcher\7 Days To die Server Launcher.psproj
#------------------------------------------------------------------------
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2019 v5.6.167
     Generated on:       8/18/2021 10:15 PM
     Generated by:       imsea
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2019
#>



#region Source: Startup.pss
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
	
	
	# Make Sure The Launcher Is Running As Admin
	$id = [System.Security.Principal.WindowsIdentity]::GetCurrent()
	$p = New-Object System.Security.Principal.WindowsPrincipal($id)
	if ($p.IsInRole([System.Security.Principal.WindowsBuiltInRole]::Administrator))
	{
		#Passed
		if((Show-7DTD_Server_Launcher_psf) -eq 'OK')
		{
		
		}
	}
	else
	{
		#Failed
		if ((Show-Run_As_Admin_Notify_psf) -eq 'OK')
		{
			
		}
	}
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}


#endregion Source: Startup.pss

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($null -ne $hostinvocation)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	#Default Path Of 7 Days To Die Folder
	
	If (Test-Path -Path 'HKCU:\SOFTWARE\CindarLoader')
	{
		$global:7DTDPath = Get-ItemPropertyValue 'HKCU:\Software\CindarLoader' -Name "GamePath"
	}
	else
	{
		New-Item -Path "HKCU:\SOFTWARE\CindarLoader"
		Set-ItemProperty -Path "HKCU:\SOFTWARE\CindarLoader" -Name 'GamePath' -Value 'C:\Program Files (x86)\Steam\steamapps\common\7 Days To Die' -Type "String"
		$global:7DTDPath = Get-ItemPropertyValue 'HKCU:\Software\CindarLoader' -Name "GamePath"
	}
	
		
#endregion Source: Globals.ps1

#region Source: 7DTD Server Launcher.psf
function Show-7DTD_Server_Launcher_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Define SAPIEN Types
	#----------------------------------------------
	try{
		[ProgressBarOverlay] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms', 'System.Drawing') -TypeDefinition  @" 
		using System;
		using System.Windows.Forms;
		using System.Drawing;
        namespace SAPIENTypes
        {
		    public class ProgressBarOverlay : System.Windows.Forms.ProgressBar
	        {
                public ProgressBarOverlay() : base() { SetStyle(ControlStyles.OptimizedDoubleBuffer | ControlStyles.AllPaintingInWmPaint, true); }
	            protected override void WndProc(ref Message m)
	            { 
	                base.WndProc(ref m);
	                if (m.Msg == 0x000F)// WM_PAINT
	                {
	                    if (Style != System.Windows.Forms.ProgressBarStyle.Marquee || !string.IsNullOrEmpty(this.Text))
                        {
                            using (Graphics g = this.CreateGraphics())
                            {
                                using (StringFormat stringFormat = new StringFormat(StringFormatFlags.NoWrap))
                                {
                                    stringFormat.Alignment = StringAlignment.Center;
                                    stringFormat.LineAlignment = StringAlignment.Center;
                                    if (!string.IsNullOrEmpty(this.Text))
                                        g.DrawString(this.Text, this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    else
                                    {
                                        int percent = (int)(((double)Value / (double)Maximum) * 100);
                                        g.DrawString(percent.ToString() + "%", this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    }
                                }
                            }
                        }
	                }
	            }
              
                public string TextOverlay
                {
                    get
                    {
                        return base.Text;
                    }
                    set
                    {
                        base.Text = value;
                        Invalidate();
                    }
                }
	        }
        }
"@ -IgnoreWarnings | Out-Null
	}
	try{
		[FolderBrowserModernDialog] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
		using System;
		using System.Windows.Forms;
		using System.Reflection;

        namespace SAPIENTypes
        {
		    public class FolderBrowserModernDialog : System.Windows.Forms.CommonDialog
            {
                private System.Windows.Forms.OpenFileDialog fileDialog;
                public FolderBrowserModernDialog()
                {
                    fileDialog = new System.Windows.Forms.OpenFileDialog();
                    fileDialog.Filter = "Folders|\n";
                    fileDialog.AddExtension = false;
                    fileDialog.CheckFileExists = false;
                    fileDialog.DereferenceLinks = true;
                    fileDialog.Multiselect = false;
                    fileDialog.Title = "Select a folder";
                }

                public string Title
                {
                    get { return fileDialog.Title; }
                    set { fileDialog.Title = value; }
                }

                public string InitialDirectory
                {
                    get { return fileDialog.InitialDirectory; }
                    set { fileDialog.InitialDirectory = value; }
                }
                
                public string SelectedPath
                {
                    get { return fileDialog.FileName; }
                    set { fileDialog.FileName = value; }
                }

                object InvokeMethod(Type type, object obj, string method, object[] parameters)
                {
                    MethodInfo methInfo = type.GetMethod(method, BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
                    return methInfo.Invoke(obj, parameters);
                }

                bool ShowOriginalBrowserDialog(IntPtr hwndOwner)
                {
                    using(FolderBrowserDialog folderBrowserDialog = new FolderBrowserDialog())
                    {
                        folderBrowserDialog.Description = this.Title;
                        folderBrowserDialog.SelectedPath = !string.IsNullOrEmpty(this.SelectedPath) ? this.SelectedPath : this.InitialDirectory;
                        folderBrowserDialog.ShowNewFolderButton = false;
                        if (folderBrowserDialog.ShowDialog() == DialogResult.OK)
                        {
                            fileDialog.FileName = folderBrowserDialog.SelectedPath;
                            return true;
                        }
                        return false;
                    }
                }

                protected override bool RunDialog(IntPtr hwndOwner)
                {
                    if (Environment.OSVersion.Version.Major >= 6)
                    {      
                        try
                        {
                            bool flag = false;
                            System.Reflection.Assembly assembly = Assembly.Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");
                            Type typeIFileDialog = assembly.GetType("System.Windows.Forms.FileDialogNative").GetNestedType("IFileDialog", BindingFlags.NonPublic);
                            uint num = 0;
                            object dialog = InvokeMethod(fileDialog.GetType(), fileDialog, "CreateVistaDialog", null);
                            InvokeMethod(fileDialog.GetType(), fileDialog, "OnBeforeVistaDialog", new object[] { dialog });
                            uint options = (uint)InvokeMethod(typeof(System.Windows.Forms.FileDialog), fileDialog, "GetOptions", null) | (uint)0x20;
                            InvokeMethod(typeIFileDialog, dialog, "SetOptions", new object[] { options });
                            Type vistaDialogEventsType = assembly.GetType("System.Windows.Forms.FileDialog").GetNestedType("VistaDialogEvents", BindingFlags.NonPublic);
                            object pfde = Activator.CreateInstance(vistaDialogEventsType, fileDialog);
                            object[] parameters = new object[] { pfde, num };
                            InvokeMethod(typeIFileDialog, dialog, "Advise", parameters);
                            num = (uint)parameters[1];
                            try
                            {
                                int num2 = (int)InvokeMethod(typeIFileDialog, dialog, "Show", new object[] { hwndOwner });
                                flag = 0 == num2;
                            }
                            finally
                            {
                                InvokeMethod(typeIFileDialog, dialog, "Unadvise", new object[] { num });
                                GC.KeepAlive(pfde);
                            }
                            return flag;
                        }
                        catch
                        {
                            return ShowOriginalBrowserDialog(hwndOwner);
                        }
                    }
                    else
                        return ShowOriginalBrowserDialog(hwndOwner);
                }

                public override void Reset()
                {
                    fileDialog.Reset();
                }
            }
       }
"@ -IgnoreWarnings | Out-Null
	}
	#endregion Define SAPIEN Types

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$form7DaysToDieCindarsWor = New-Object 'System.Windows.Forms.Form'
	$cbCacheMods = New-Object 'System.Windows.Forms.CheckBox'
	$cbEAC = New-Object 'System.Windows.Forms.CheckBox'
	$picturebox1 = New-Object 'System.Windows.Forms.PictureBox'
	$buttonChangePath = New-Object 'System.Windows.Forms.Button'
	$labelCurrentGamePath = New-Object 'System.Windows.Forms.Label'
	$tbGamePath = New-Object 'System.Windows.Forms.TextBox'
	$progressbaroverlay1 = New-Object 'SAPIENTypes.ProgressBarOverlay'
	$buttonConnectToCindarsWorl = New-Object 'System.Windows.Forms.Button'
	$dialogFolderBrowser = New-Object 'SAPIENTypes.FolderBrowserModernDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$form7DaysToDieCindarsWor_Load={
		$tbGamePath.Text = $7DTDPath
	}
	
	$buttonConnectToCindarsWorl_Click={
	
		#Verify 7 Days To Die Folder Path
		$progressbaroverlay1.TextOverlay = "Verifying Game Path And Version";
		$progressbaroverlay1.PerformStep();
		If (Test-Path -Path "$7DTDPath\7DaysToDie.exe")
		{
			#Found The Game Path
		}
		else
		{
			#Failed To Find The Game Path
			do
			{
				$dialogFolderBrowser.ShowDialog()
			}
			
			#Keep Making The User Select The Game Folder Until They Pick One With The 7 Days To Die Binary In It
			while (!(Test-Path $($dialogFolderBrowser.SelectedPath + '\7DaysToDie.exe')))
			
			#Update The Text Box
			$tbGamePath.Text = $dialogFolderBrowser.SelectedPath
			
			#Update The Registry
			Set-ItemProperty -Path "HKCU:\SOFTWARE\CindarLoader" -Name 'GamePath' -Value $dialogFolderBrowser.SelectedPath -Type "String"
			
			#Update Global Variable Path
			$global:7DTDPath = [string]$dialogFolderBrowser.SelectedPath
		}
		
		If ($cbCacheMods.Checked -eq $true)
		{
			# Check The Mod Directory And See If Mods Exist
			If (Test-Path "$7DTDPath\Mods")
			{
				#Download Cache List
				$progressbaroverlay1.TextOverlay = "Downloading Cached List";
				$progressbaroverlay1.PerformStep();
				$CacheList = Invoke-RestMethod -URI "https://raw.githubusercontent.com/imseandavis/7_Days_To_Die/master/CachedList.txt"
				
				#Verify Cached Mods Exists
				$progressbaroverlay1.TextOverlay = "Verifying Cached Mods";
				$progressbaroverlay1.PerformStep();
				$AllModsCached = $true
				ForEach ($CachedMod in $CacheList)
				{
					If (!(Test-Path "$7DTDPath\Mods\$CachedMod"))
					{
						$AllModsCached = $false
					}
				}
				
				# Determine Cached Mod State
				If ($AllModsCached)
				{
					$progressbaroverlay1.TextOverlay = "All Required Cached Mods Found!";
					$progressbaroverlay1.PerformStep();
					
					#Launch 7 Days To Die & Connect To Server
					$progressbaroverlay1.TextOverlay = "Launching 7 Days To Die...";
					$progressbaroverlay1.PerformStep();
					try
					{
						If ($cbEAC.Checked -eq $true)
						{
							Start-Process "$7DTDPath\7DaysToDie_EAC.exe"
						}
						else
						{
							Start-Process "$7DTDPath\7DaysToDie.exe"
						}
					}
					catch
					{
						"Error Couldn't Find The Game File To Start, But It Should Have Been There!"
					}
				}
				else
				{
					# All Cached Mods Not Found, Fixing...
					$progressbaroverlay1.TextOverlay = "All Required Cached Mods Not Found, Fixing...";
					$progressbaroverlay1.PerformStep();
					
					# Delete All Current Mods
					If (Test-Path "$7DTDPath\Mods")
					{
						#Delete Current Mods
						$progressbaroverlay1.TextOverlay = "Removing Old Mods";
						$progressbaroverlay1.PerformStep();
						Get-ChildItem -Path "$7DTDPath\Mods" | Remove-Item -Recurse
					}
					else
					{
						#Create Mods Directory
						$progressbaroverlay1.TextOverlay = "Creating Mod Folder";
						New-Item -Type Directory -Path "$7DTDPath\Mods" | Out-Null
					}
					
					# Download & Install CindarMods From GitHub
					try
					{
						#Install 7Zip Packages
						$progressbaroverlay1.TextOverlay = "Installing Helper Packages";
						$progressbaroverlay1.PerformStep();
						If ($((Get-Package | Where-Object { $_.Name -eq "7Zip4Powershell" }).Count) -lt 1)
						{
							Install-Package -Force 7Zip4PowerShell | Out-Null
						}
						
						#Get Latest Release
						$CindarsModsReleaseVersion = ((Invoke-RestMethod -URI "https://api.github.com/repos/imseandavis/7_Days_To_Die/tags")[0].name);
						
						#Download Latest CindarsMod Release
						$progressbaroverlay1.TextOverlay = "Downloading Latest Client Side Mod Files";
						$progressbaroverlay1.PerformStep();
						(New-Object System.Net.WebClient).DownloadFile("https://github.com/imseandavis/7_Days_To_Die/archive/$CindarsModsReleaseVersion.zip", "$7DTDPath\Mods\CindarsMods.zip");
						
						#Unzip
						#Write-Host "--Unzipping CindarsMods To: $ServerModsPath"
						$progressbaroverlay1.TextOverlay = "Unzipping Mods...";
						$progressbaroverlay1.PerformStep();
						Expand-7Zip -ArchiveFileName "$7DTDPath\Mods\CindarsMods.zip" -TargetPath "$7DTDPath\Mods"
						
						#Copy Mods To Mod Folder
						$progressbaroverlay1.TextOverlay = "Installing Mods...";
						$progressbaroverlay1.PerformStep();
						$ModVerisonFolderName = (Get-ChildItem "$7DTDPath\Mods" -Directory | Select-Object -First 1).Name
						Copy-Item -Path "$7DTDPath\Mods\$ModVerisonFolderName\Mods" -Destination "$7DTDPath" -Recurse -Force
						
						#Delete Zip
						#Write-Host "--Cleaning Up CindarsMods Temp Files"
						$progressbaroverlay1.TextOverlay = "Cleaning Up...";
						$progressbaroverlay1.PerformStep();
						Remove-Item -Path "$7DTDPath\Mods\CindarsMods.zip" -Force
						Remove-Item -Path "$7DTDPath\Mods\7_Days_To_Die-$CindarsModsReleaseVersion" -Recurse -Force
						
						#Launch 7 Days To Die & Connect To Server
						$progressbaroverlay1.TextOverlay = "Launching 7 Days To Die...";
						$progressbaroverlay1.PerformStep();
						try
						{
							If ($cbEAC.Checked -eq $true)
							{
								Start-Process "$7DTDPath\7DaysToDie_EAC.exe"
							}
							else
							{
								Start-Process "$7DTDPath\7DaysToDie.exe"
							}
						}
						catch
						{
							"Error Couldn't Find The Game File To Start, But It Should Have Been There!"
						}
					}
					catch
					{
						$progressbaroverlay1.TextOverlay = "UH OH....Something Went Wrong, Call Your Dad!";
					}
				}
				
				
			}
		}
		else
		{
			# Delete All Current Mods
			If (Test-Path "$7DTDPath\Mods")
			{
				#Delete Current Mods
				$progressbaroverlay1.TextOverlay = "Removing Old Mods";
				$progressbaroverlay1.PerformStep();
				Get-ChildItem -Path "$7DTDPath\Mods" | Remove-Item -Recurse
			}
			else
			{
				#Create Mods Directory
				$progressbaroverlay1.TextOverlay = "Creating Mod Folder";
				New-Item -Type Directory -Path "$7DTDPath\Mods" | Out-Null
			}
			
			# Download & Install CindarMods From GitHub
			try
			{
				#Install 7Zip Packages
				$progressbaroverlay1.TextOverlay = "Installing Helper Packages";
				$progressbaroverlay1.PerformStep();
				If ($((Get-Package | Where-Object { $_.Name -eq "7Zip4Powershell" }).Count) -lt 1)
				{
					Install-Package -Force 7Zip4PowerShell | Out-Null
				}
				
				#Get Latest Release
				$CindarsModsReleaseVersion = ((Invoke-RestMethod -URI "https://api.github.com/repos/imseandavis/7_Days_To_Die/tags")[0].name);
				
				#Download Latest CindarsMod Release
				$progressbaroverlay1.TextOverlay = "Downloading Latest Client Side Mod Files";
				$progressbaroverlay1.PerformStep();
				(New-Object System.Net.WebClient).DownloadFile("https://github.com/imseandavis/7_Days_To_Die/archive/$CindarsModsReleaseVersion.zip", "$7DTDPath\Mods\CindarsMods.zip");
				
				#Unzip
				#Write-Host "--Unzipping CindarsMods To: $ServerModsPath"
				$progressbaroverlay1.TextOverlay = "Unzipping Mods...";
				$progressbaroverlay1.PerformStep();
				Expand-7Zip -ArchiveFileName "$7DTDPath\Mods\CindarsMods.zip" -TargetPath "$7DTDPath\Mods"
				
				#Copy Mods To Mod Folder
				$progressbaroverlay1.TextOverlay = "Installing Mods...";
				$progressbaroverlay1.PerformStep();
				$ModVerisonFolderName = (Get-ChildItem "$7DTDPath\Mods" -Directory | Select-Object -First 1).Name
				Copy-Item -Path "$7DTDPath\Mods\$ModVerisonFolderName\Mods" -Destination "$7DTDPath" -Recurse -Force
				
				#Delete Zip
				#Write-Host "--Cleaning Up CindarsMods Temp Files"
				$progressbaroverlay1.TextOverlay = "Cleaning Up...";
				$progressbaroverlay1.PerformStep();
				Remove-Item -Path "$7DTDPath\Mods\CindarsMods.zip" -Force
				Remove-Item -Path "$7DTDPath\Mods\7_Days_To_Die-$CindarsModsReleaseVersion" -Recurse -Force
				
				#Launch 7 Days To Die & Connect To Server
				$progressbaroverlay1.TextOverlay = "Launching 7 Days To Die...";
				$progressbaroverlay1.PerformStep();
				try
				{
					If ($cbEAC.Checked -eq $true)
					{
						Start-Process "$7DTDPath\7DaysToDie_EAC.exe"
					}
					else
					{
						Start-Process "$7DTDPath\7DaysToDie.exe"
					}
				}
				catch
				{
					"Error Couldn't Find The Game File To Start, But It Should Have Been There!"
				}
			}
			catch
			{
				$progressbaroverlay1.TextOverlay = "UH OH....Something Went Wrong, Call Your Dad!";
			}
		}
		
	}
	
	$buttonChangePath_Click={
		
		#Open Folder Browser Dialog And Select New Path
		$dialogFolderBrowser.ShowDialog()
		if ($dialogFolderBrowser.SelectedPath -ne $null)
		{
			#Update The Text Box
			$tbGamePath.Text = $dialogFolderBrowser.SelectedPath
			
			#Update The Registry
			Set-ItemProperty -Path "HKCU:\SOFTWARE\CindarLoader" -Name 'GamePath' -Value $dialogFolderBrowser.SelectedPath -Type "String"
			
			#Update Global Variable Path
			$global:7DTDPath = [string]$folderbrowsermoderndialog1.SelectedPath
		}
	}
	$cbEAC_CheckedChanged={
		#TODO: Place custom script here
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$form7DaysToDieCindarsWor.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:7DTD_Server_Launcher_cbCacheMods = $cbCacheMods.Checked
		$script:7DTD_Server_Launcher_cbEAC = $cbEAC.Checked
		$script:7DTD_Server_Launcher_tbGamePath = $tbGamePath.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$cbEAC.remove_CheckedChanged($cbEAC_CheckedChanged)
			$buttonChangePath.remove_Click($buttonChangePath_Click)
			$buttonConnectToCindarsWorl.remove_Click($buttonConnectToCindarsWorl_Click)
			$form7DaysToDieCindarsWor.remove_Load($form7DaysToDieCindarsWor_Load)
			$form7DaysToDieCindarsWor.remove_Load($Form_StateCorrection_Load)
			$form7DaysToDieCindarsWor.remove_Closing($Form_StoreValues_Closing)
			$form7DaysToDieCindarsWor.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$form7DaysToDieCindarsWor.SuspendLayout()
	#
	# form7DaysToDieCindarsWor
	#
	$form7DaysToDieCindarsWor.Controls.Add($cbCacheMods)
	$form7DaysToDieCindarsWor.Controls.Add($cbEAC)
	$form7DaysToDieCindarsWor.Controls.Add($picturebox1)
	$form7DaysToDieCindarsWor.Controls.Add($buttonChangePath)
	$form7DaysToDieCindarsWor.Controls.Add($labelCurrentGamePath)
	$form7DaysToDieCindarsWor.Controls.Add($tbGamePath)
	$form7DaysToDieCindarsWor.Controls.Add($progressbaroverlay1)
	$form7DaysToDieCindarsWor.Controls.Add($buttonConnectToCindarsWorl)
	$form7DaysToDieCindarsWor.AcceptButton = $buttonConnectToCindarsWorl
	$form7DaysToDieCindarsWor.AutoScaleDimensions = '6, 13'
	$form7DaysToDieCindarsWor.AutoScaleMode = 'Font'
	$form7DaysToDieCindarsWor.ClientSize = '687, 473'
	$form7DaysToDieCindarsWor.FormBorderStyle = 'FixedDialog'
	$form7DaysToDieCindarsWor.MaximizeBox = $False
	$form7DaysToDieCindarsWor.MinimizeBox = $False
	$form7DaysToDieCindarsWor.Name = 'form7DaysToDieCindarsWor'
	$form7DaysToDieCindarsWor.StartPosition = 'CenterScreen'
	$form7DaysToDieCindarsWor.Text = '7 Days To Die Cindar''s World Server Launcher'
	$form7DaysToDieCindarsWor.add_Load($form7DaysToDieCindarsWor_Load)
	#
	# cbCacheMods
	#
	$cbCacheMods.Checked = $True
	$cbCacheMods.CheckState = 'Checked'
	$cbCacheMods.Location = '571, 437'
	$cbCacheMods.Name = 'cbCacheMods'
	$cbCacheMods.Size = '104, 24'
	$cbCacheMods.TabIndex = 8
	$cbCacheMods.Text = 'Cache Mods'
	$cbCacheMods.UseCompatibleTextRendering = $True
	$cbCacheMods.UseVisualStyleBackColor = $True
	#
	# cbEAC
	#
	$cbEAC.Checked = $True
	$cbEAC.CheckState = 'Checked'
	$cbEAC.Location = '465, 438'
	$cbEAC.Name = 'cbEAC'
	$cbEAC.Size = '104, 24'
	$cbEAC.TabIndex = 7
	$cbEAC.Text = 'Enable EAC'
	$cbEAC.UseCompatibleTextRendering = $True
	$cbEAC.UseVisualStyleBackColor = $True
	$cbEAC.add_CheckedChanged($cbEAC_CheckedChanged)
	#
	# picturebox1
	#
	#region Binary Data
	$picturebox1.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$picturebox1.Location = '12, 12'
	$picturebox1.Name = 'picturebox1'
	$picturebox1.Size = '663, 319'
	$picturebox1.SizeMode = 'StretchImage'
	$picturebox1.TabIndex = 6
	$picturebox1.TabStop = $False
	#
	# buttonChangePath
	#
	$buttonChangePath.Location = '575, 356'
	$buttonChangePath.Name = 'buttonChangePath'
	$buttonChangePath.Size = '103, 23'
	$buttonChangePath.TabIndex = 5
	$buttonChangePath.Text = 'Change Path...'
	$buttonChangePath.UseCompatibleTextRendering = $True
	$buttonChangePath.UseVisualStyleBackColor = $True
	$buttonChangePath.add_Click($buttonChangePath_Click)
	#
	# labelCurrentGamePath
	#
	$labelCurrentGamePath.AutoSize = $True
	$labelCurrentGamePath.Location = '12, 361'
	$labelCurrentGamePath.Name = 'labelCurrentGamePath'
	$labelCurrentGamePath.Size = '102, 17'
	$labelCurrentGamePath.TabIndex = 4
	$labelCurrentGamePath.Text = 'Current Game Path'
	$labelCurrentGamePath.UseCompatibleTextRendering = $True
	#
	# tbGamePath
	#
	$tbGamePath.Location = '120, 358'
	$tbGamePath.Name = 'tbGamePath'
	$tbGamePath.Size = '449, 20'
	$tbGamePath.TabIndex = 3
	#
	# progressbaroverlay1
	#
	$progressbaroverlay1.Location = '15, 393'
	$progressbaroverlay1.Name = 'progressbaroverlay1'
	$progressbaroverlay1.Size = '663, 23'
	$progressbaroverlay1.Step = 12
	$progressbaroverlay1.TabIndex = 2
	#
	# buttonConnectToCindarsWorl
	#
	$buttonConnectToCindarsWorl.Anchor = 'Bottom, Right'
	$buttonConnectToCindarsWorl.DialogResult = 'OK'
	$buttonConnectToCindarsWorl.Location = '259, 438'
	$buttonConnectToCindarsWorl.Name = 'buttonConnectToCindarsWorl'
	$buttonConnectToCindarsWorl.Size = '160, 23'
	$buttonConnectToCindarsWorl.TabIndex = 0
	$buttonConnectToCindarsWorl.Text = 'Connect To Cindar''s World'
	$buttonConnectToCindarsWorl.UseCompatibleTextRendering = $True
	$buttonConnectToCindarsWorl.UseVisualStyleBackColor = $True
	$buttonConnectToCindarsWorl.add_Click($buttonConnectToCindarsWorl_Click)
	#
	# dialogFolderBrowser
	#
	$form7DaysToDieCindarsWor.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $form7DaysToDieCindarsWor.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$form7DaysToDieCindarsWor.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$form7DaysToDieCindarsWor.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$form7DaysToDieCindarsWor.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $form7DaysToDieCindarsWor.ShowDialog()

}
#endregion Source: 7DTD Server Launcher.psf

#region Source: Run As Admin Notify.psf
function Show-Run_As_Admin_Notify_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formPleaseRunThisAppAsAn = New-Object 'System.Windows.Forms.Form'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formPleaseRunThisAppAsAn_Load={
		#TODO: Initialize Form Controls here
		
	}
	
	$buttonOK_Click = {
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formPleaseRunThisAppAsAn.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonOK.remove_Click($buttonOK_Click)
			$formPleaseRunThisAppAsAn.remove_Load($formPleaseRunThisAppAsAn_Load)
			$formPleaseRunThisAppAsAn.remove_Load($Form_StateCorrection_Load)
			$formPleaseRunThisAppAsAn.remove_Closing($Form_StoreValues_Closing)
			$formPleaseRunThisAppAsAn.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formPleaseRunThisAppAsAn.SuspendLayout()
	#
	# formPleaseRunThisAppAsAn
	#
	$formPleaseRunThisAppAsAn.Controls.Add($buttonOK)
	$formPleaseRunThisAppAsAn.AcceptButton = $buttonOK
	$formPleaseRunThisAppAsAn.AutoScaleDimensions = '6, 13'
	$formPleaseRunThisAppAsAn.AutoScaleMode = 'Font'
	$formPleaseRunThisAppAsAn.ClientSize = '284, 45'
	$formPleaseRunThisAppAsAn.FormBorderStyle = 'FixedDialog'
	$formPleaseRunThisAppAsAn.MaximizeBox = $False
	$formPleaseRunThisAppAsAn.MinimizeBox = $False
	$formPleaseRunThisAppAsAn.Name = 'formPleaseRunThisAppAsAn'
	$formPleaseRunThisAppAsAn.StartPosition = 'CenterScreen'
	$formPleaseRunThisAppAsAn.Text = 'Please Run This App As An Administrator!'
	$formPleaseRunThisAppAsAn.add_Load($formPleaseRunThisAppAsAn_Load)
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '107, 12'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	$formPleaseRunThisAppAsAn.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formPleaseRunThisAppAsAn.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formPleaseRunThisAppAsAn.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formPleaseRunThisAppAsAn.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formPleaseRunThisAppAsAn.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formPleaseRunThisAppAsAn.ShowDialog()

}
#endregion Source: Run As Admin Notify.psf

#Start the application
Main ($CommandLine)
